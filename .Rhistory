usethis::use_test()
library(shinytest2)
devtools::document()
devtools::load_all()
shinytest2::use_shinytest2()
dir <- "R/"
shinytest2::record_test(dir)
shinytest2::record_test(dir)
sessionInfo()
golem::use_module_test()
shiny::runTests()
library(devtools)
devtools::load_all()
library(shinytest2)
shinytest2::record_test()
shinyAppDir()
testthat::test_local()
rlang::last_error()$app
TestAnaAPP()
shinytest2::load_app_env()
s <- shinytest2::load_app_env()
s
s$s
s$.Random.seed
shinyAppDir(x)
debug(shinyAppDir)
debug(shinyAppDir())
debug(shinyAppDir）
debug(shinyAppDir)
library(shinytest2)
test_that("{shinytest2} recording: TestAnaAPP", {
# Don't run these tests on the CRAN build servers
skip_on_cran()
#shiny_app <- TestAnaAPP()
app <- AppDriver$new(name = "TestAnaAPP", height = 803, width = 1407)
# app <- AppDriver$new(name = "TestAnaAPP", height = 803, width = 1407)
app$set_inputs(sidebarmenu = "loading")
app$set_inputs(sidebarItemExpanded = "ExploratoryFactorAnalysis")
app$set_inputs(EFA_method = "Maximum Likelihood Factor Analysis")
app$set_inputs(rotation_method = "Promax")
app$expect_values()
app$set_inputs(sidebarmenu = "path_plot")
app$set_inputs(sidebarItemExpanded = "ConfirmatoryFactorAnalysis")
app$set_inputs(CFA_plot_height = 1050)
app$expect_values()
app$set_inputs(sidebarmenu = "IRTmodelfit")
app$set_inputs(sidebarItemExpanded = "ItemResponseTheory")
app$set_inputs(modelselect = "Two parameters logistic model (2PL)")
app$expect_values()
app$set_inputs(sidebarmenu = "IRTassum_test")
app$set_inputs(IRT_select_independent = "LD-X2 (Chen & Thissen, 1997)")
app$expect_values()
app$set_inputs(sidebarmenu = "IRTitemfit")
app$set_inputs(IRT_itemfit_method = "chi-squared method (Bock,1972)")
app$expect_values()
app$set_inputs(sidebarmenu = "MIRTmodelfit")
app$set_inputs(sidebarItemExpanded = "MultidimensionalIRT")
app$set_inputs(modelselect1 = "Rasch model (1PL)")
app$set_inputs(include_cov = "Yes")
app$expect_values()
app$expect_values()
app$set_inputs(sidebarmenu = "MIRTperson")
app$set_inputs(MIRT_person_est_method = "maximum likelihood (ML)")
app$expect_values()
app$set_inputs(sidebarmenu = "CRM_itemfit")
app$set_inputs(sidebarItemExpanded = "ContinuousResponseModel")
app$set_inputs(wright_dim_select = "F1")
app$set_inputs(MIRT_dim_select = "F1")
app$set_inputs(CRM_fit_group = 33)
app$expect_values()
})
?skip_on_cran()
devtools::document()
devtools::document()
devtools::document()
library(mirt)
data_sim <- simdata(a = runif(10,1,2),
d = rnorm(10,0,1),N = 1000,itemtype = "2PL"
)
data_sim
data_sim
fa  <- "F1 = Item_1-Item_5
F2 = Item_6-Item_10
COV = F1*F2"
fit <- mirt(data = data_sim,model = fa,itemtype = "2PL")
data_sim <- cbind(
simdata(a = runif(5,1,2),
d = rnorm(5,0,1),N = 500,itemtype = "2PL",Theta = theta1
),
simdata(a = runif(5,1,2),
d = rnorm(5,0,1),N = 500,itemtype = "2PL",Theta = theta2
)
)
library(mirt)
theta1 <- rnorm(1000,0,1)
theta2 <- rnorm(1000,0,1)
data_sim <- cbind(
simdata(a = runif(5,1,2),
d = rnorm(5,0,1),N = 500,itemtype = "2PL",Theta = theta1
),
simdata(a = runif(5,1,2),
d = rnorm(5,0,1),N = 500,itemtype = "2PL",Theta = theta2
)
)
data_sim
colnames(data_sim) <- paste0("item",1:10)
fa  <- "F1 = Item1-Item5
F2 = Item6-Item10
COV = F1*F2"
fit <- mirt(data = data_sim,model = fa,itemtype = "2PL")
data_sim
colnames(data_sim) <- paste0("Item",1:10)
fa  <- "F1 = Item1-Item5
F2 = Item6-Item10
COV = F1*F2"
fit <- mirt(data = data_sim,model = fa,itemtype = "2PL")
iteminf <- testinfo(x = fit,Theta = seq(-3,3,0.01),degrees = c(45,45))
iteminf <- testinfo(x = fit,Theta = cbind(seq(-3,3,0.01),
seq(-3,3,0.01)),
degrees = c(45,45))
iteminf
library(catR)
itempara <- mirt::coef(object = fit,simplify =T)
itempara <- mirt::coef(object = fit,simplify =T,IRTpars =T)
itempara
itempara <- mirt::coef(object = fit,simplify =T,IRTpars =T)$items
Ii(th = seq(-3,3,0.01),it = itempara)
?eapEst
Ii(th = seq(-3,3,0.01),it = itempara[1:5,])
Ii(th = seq(-3,3,0.01),it = itempara[1:5,])
?Ii
library(catR)
infor <- vector()
sim_theta <- seq(-3,3,0.01)
for (i in 1:length(sim_theta)) {
infor[i] <- Ii(th = ,it = itempara[1:5,])
}
for (i in 1:length(sim_theta)) {
infor[i] <- Ii(th = sim_theta[i],it = itempara[1:5,])
}
sim_theta[i]
warnings()
infor[i] <- Ii(th = sim_theta[i],it = itempara[1:5,])[[1]]
Ii(th = sim_theta[i],it = itempara[1:5,])
iteminf <- testinfo(x = fit,Theta = cbind(seq(-3,3,0.01),
seq(-3,3,0.01)),
degrees = c(45,45),individual = T)
iteminf
infor <- matrix(NA,length(sim_theta),10 )
library(catR)
sim_theta <- seq(-3,3,0.01)
infor <- matrix(NA,length(sim_theta),10 )
for (i in 1:length(sim_theta)) {
infor[i,] <- Ii(th = sim_theta[i],it = itempara[1:5,])$Ii
}
iteminf==infor
iteminf-infor
iteminf <- testinfo(x = fit,Theta = cbind(seq(-3,3,0.01),
seq(-3,3,0.01)),
degrees = c(90,),individual = T)
iteminf <- testinfo(x = fit,Theta = cbind(seq(-3,3,0.01),
seq(-3,3,0.01)),
degrees = c(90,90),individual = T)
iteminf-infor
infor[i,6:10] <- Ii(th = sim_theta[i],it = itempara[6:10,])$Ii
library(catR)
sim_theta <- seq(-3,3,0.01)
infor <- matrix(NA,length(sim_theta),10 )
for (i in 1:length(sim_theta)) {
infor[i,1:5] <- Ii(th = sim_theta[i],it = itempara[1:5,])$Ii
infor[i,6:10] <- Ii(th = sim_theta[i],it = itempara[6:10,])$Ii
}
iteminf-infor
iteminf <- testinfo(x = fit,Theta = cbind(seq(-3,3,0.01),
seq(-3,3,0.01)),
degrees = c(45,45),individual = T)
iteminf-infor
iteminf <- testinfo(x = fit,Theta = cbind(seq(-3,3,0.01),
seq(-3,3,0.01)),
degrees = c(90,90),individual = T)
iteminf-infor
abs(rowSums(iteminf) - rowSums(infor)
)
iteminf <- testinfo(x = fit,Theta = cbind(seq(-3,3,0.01),
seq(-3,3,0.01)),
degrees = c(90,45),individual = T)
abs(rowSums(iteminf) - rowSums(infor) )
iteminf <- testinfo(x = fit,Theta = cbind(seq(-3,3,0.01),
seq(-3,3,0.01)),
degrees = c(90,90),individual = T)
abs(rowSums(iteminf) - rowSums(infor) )
iteminf <- testinfo(x = fit,Theta = cbind(seq(-3,3,0.01),
seq(-3,3,0.01)),
degrees = c(0,0),individual = T)
abs(rowSums(iteminf) - rowSums(infor) )
iteminf <- testinfo(x = fit,Theta = cbind(seq(-3,3,0.01),
seq(-3,3,0.01)),
degrees = c(45,45),individual = T)
abs(rowSums(iteminf) - rowSums(infor) )
iteminf <- testinfo(x = fit,Theta = cbind(seq(-3,3,0.01),
seq(-3,3,0.01)),
degrees = c(90,90),individual = T)
abs(rowSums(iteminf) - rowSums(infor) )
?testinfo
iteminf <- testinfo(x = fit,Theta = cbind(seq(-3,3,0.01),
seq(-3,3,0.01)),
degrees = c(0,0),individual = T)
abs(rowSums(iteminf) - rowSums(infor) )
iteminf <- testinfo(x = fit,Theta = cbind(seq(-3,3,0.01),
seq(-3,3,0.01)),
degrees = c(90,90),individual = T)
abs(rowSums(iteminf) - rowSums(infor) )
iteminf <- testinfo(x = fit,Theta = cbind(seq(-3,3,0.01),
seq(-3,3,0.01)),
degrees = c(90,45),individual = T)
abs(rowSums(iteminf) - rowSums(infor) )
iteminf <- testinfo(x = fit,Theta = cbind(seq(-3,3,0.01),
seq(-3,3,0.01)),
degrees = c(45,45),individual = T)
abs(rowSums(iteminf) - rowSums(infor) )
iteminf <- testinfo(x = fit,Theta = cbind(seq(-3,3,0.01),
seq(-3,3,0.01)),
degrees = c(0,0),individual = T)
abs(rowSums(iteminf) - rowSums(infor))
iteminf <- testinfo(x = fit,Theta = cbind(seq(-3,3,0.01),
seq(-3,3,0.01)),
degrees = c(0,0),individual = F)
abs(rowSums(iteminf) - rowSums(infor))
iteminf
rowSums(infor))
rowSums(infor)
library(catR)
sim_theta <- seq(-3,3,0.01)
infor <- matrix(NA,length(sim_theta),10 )
for (i in 1:length(sim_theta)) {
infor[i,1:5] <- Ii(th = sim_theta[i],it = itempara[1:5,])$Ii
infor[i,6:10] <- Ii(th = sim_theta[i],it = itempara[6:10,])$Ii
}
infor
itempara[1:5,-2]
itempara[6:10,-1]
sim_theta <- seq(-3,3,0.01)
infor <- matrix(NA,length(sim_theta),10 )
for (i in 1:length(sim_theta)) {
infor[i,1:5] <- Ii(th = sim_theta[i],it = itempara[1:5,-2])$Ii
infor[i,6:10] <- Ii(th = sim_theta[i],it = itempara[6:10,-1])$Ii
}
infor
iteminf <- testinfo(x = fit,Theta = cbind(seq(-3,3,0.01),
seq(-3,3,0.01)),
degrees = c(0,0),individual = F)
abs(rowSums(iteminf) - rowSums(infor))
iteminf <- testinfo(x = fit,Theta = cbind(seq(-3,3,0.01),
seq(-3,3,0.01)),
degrees = c(0,0),individual = T)
abs(rowSums(iteminf) - rowSums(infor))
abs(rowSums(iteminf) = rowSums(infor))
abs(rowSums(iteminf) == rowSums(infor))
abs(rowSums(iteminf) - rowSums(infor)) <=1e-10
iteminf <- testinfo(x = fit,Theta = cbind(seq(-3,3,0.01),
seq(-3,3,0.01)),
degrees = c(45,45),individual = T)
abs(rowSums(iteminf) - rowSums(infor)) <=1e-10
iteminf <- testinfo(x = fit,Theta = cbind(seq(-3,3,0.01),
seq(-3,3,0.01)),
degrees = c(90,90),individual = T)
abs(rowSums(iteminf) - rowSums(infor)) <=1e-10
iteminf <- testinfo(x = fit,Theta = cbind(seq(-3,3,0.01),
seq(-3,3,0.01)),
degrees = c(0,0),individual = T)
abs(rowSums(iteminf) - rowSums(infor)) <=1e-10
shiny::runApp('R')
devtools::load_all()
run_app()
deto
devtools::document()
str_to_lower("Fixed")
stringr::str_to_lower("dddd")
stringr::str_to_lower("Fdddd")
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
library(TestAnaAPP)
run_app()
knitr::opts_chunk$set(echo=FALSE, warning = FALSE)
requireNamespace("officer")
requireNamespace("rmarkdown")
requireNamespace("officedown")
fmt_tra_other <- function(ft, reset_width = TRUE){#Convert matrix to table.
c <- ncol(ft)
ft <- as.data.frame(ft)%>%flextable::flextable()
ft <- flextable::bold(ft, part = "header")
ft <- flextable::fontsize(ft, size = 10, part = "all")
ft <- flextable::font(ft, fontname = "Times New Roman")
ft <- flextable::align_nottext_col(ft, align = "center")
#合并单元，调整格式
ft <- flextable::merge_h(ft, part = "header")%>%
flextable::merge_v(part = "header")%>%
flextable::theme_booktabs()%>%
flextable::bold( part = "header")%>% # Bold
flextable::bold(j=1, part = "body")%>%
#居中
flextable::align_text_col(align = "center")%>%
flextable::valign(valign = "center")%>%
flextable::padding(padding = 2)
if(reset_width == TRUE){
ft <- flextable::autofit(ft)%>%
flextable::width(j = 1:c,width = (16/2.54)/c)
}
return(ft)
}
bold_print <- function(text){
text_format <- fp_text(bold = TRUE, font.family = "Time News Roman",font.size = 12)
fp <- fp_par(text.align = "center")
return(fpar(ftext(text, prop = text_format), fp_p = fp))
}
plot_width <- 6.299
openxlsx::read.xlsx("C:/Users/17807/Desktop/MIRT_results.xlsx",sheet = "item_parameters")
openxlsx::read.xlsx("C:/Users/17807/Desktop/MIRT_results.xlsx",sheet = "Item_parameters")
openxlsx::read.xlsx("C:/Users/17807/Desktop/MIRT_results.xlsx",sheet = "Item parameters")
MIRT_itempar <- openxlsx::read.xlsx("C:/Users/17807/Desktop/MIRT_results.xlsx",sheet = "Item parameters")
MIRT_itempar
MIRT_itempar <- openxlsx::read.xlsx("C:/Users/17807/Desktop/MIRT_results.xlsx",
sheet = "Item parameters", rowNames = T)
disc_color <- function(x){
out <- rep("white", length(x))
out[x <= 0] <- "red"
out[x <= 0.3] <- "yellow"
out
}
diff_color <- function(x){
out <- rep("white", length(x))
out[abs(x) > 4 ] <- "yellow"
out
}
fmt_tra_other(MIRT_itempar)%>%flextable::highlight(j = colnames(MIRT_itempar)%>%
str_which(pattern = "Discrimination"),
color = disc_color)%>%
flextable::highlight(j = colnames(MIRT_itempar)%>%
str_which(pattern = "Difficult"),color = diff_color)
library(tidyverse)
disc_color <- function(x){
out <- rep("white", length(x))
out[x <= 0] <- "red"
out[x <= 0.3] <- "yellow"
out
}
diff_color <- function(x){
out <- rep("white", length(x))
out[abs(x) > 4 ] <- "yellow"
out
}
fmt_tra_other(MIRT_itempar)%>%flextable::highlight(j = colnames(MIRT_itempar)%>%
str_which(pattern = "Discrimination"),
color = disc_color)%>%
flextable::highlight(j = colnames(MIRT_itempar)%>%
str_which(pattern = "Difficult"),color = diff_color)
fmt_tra_other(MIRT_itempar)%>%flextable::highlight(j = colnames(MIRT_itempar)%>%
str_which(pattern = "Discrimination"),
color = disc_color)
fmt_tra_other(MIRT_itempar)
library(TestAnaAPP)
run_app()
?mirt::plot
??mirt::plot
devtools::document()
