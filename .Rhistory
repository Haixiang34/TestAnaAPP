MIRT_ICC_rea() %>% print()
dev.off()
}
)
output$MIRT_IICfile <- downloadHandler(
filename = function(){
paste0("MIRT_item_information_curve.jpeg")
},
content = function(file){
jpeg(file, width = input$MIRT_wrap_height_iic*1.618, height = input$MIRT_wrap_height_iic)
MIRT_IIC_rea() %>% print()
dev.off()
}
)
##9.12 Download results----------------------------------------------------------
output$MIRT_resultfile <- downloadHandler(
filename = function(){
paste0("MIRT_results.xlsx")
},
content = function(file){
MIRT_fit  <- MIRT_fit_rea()
dim_data <- dimension() %>% as.data.frame()
Response <- mydata() %>% as.data.frame()
mode <- dimension_recode(Qmatrix = dim_data)
sim_theta <- MIRT_person_rea()[,2:(ncol(dim_data)+1)]
item_info1 <- Item_infor(object = MIRT_fit,
theta = sim_theta,
Qmatrix = dim_data,
colnames = colnames(Response))
item_info <- item_info1$Item_information
colnames(item_info ) <- colnames(Response)
dim_infor <- item_info1$dim_information
colnames(dim_infor) <- c(mode$F_names, paste0(mode$F_names, "_Information"))
if(mode$is.within_item==FALSE){
datalist <- list("Score data" = Response,
"Dimension" = dim_data ,
"Model fit" = MIRT_modelfit_rea(),
"Dependence test" = MIRT_Q3_rea(),
"Item fit" = MIRT_itemfit_rea(),
"Item parameters" = MIRT_itempar_rea(),
"Person parameters" = MIRT_person_rea(),
"Item information" = item_info,
"Test information" = dim_infor)
}else{
datalist <- list("Score data" = Response,
"Dimension" = dim_data ,
"Model fit" = MIRT_modelfit_rea(),
"Dependence test" = MIRT_Q3_rea(),
"Item fit" = MIRT_itemfit_rea(),
"Item parameters" = MIRT_itempar_rea(),
"Person parameters" = MIRT_person_rea(),
"Item information" = item_info)
}
openxlsx::write.xlsx(x = datalist, file = file, rowNames = T)
}
)
##9.13 Downlaod analysis report-------------------------------------------
output$MIRT_report <- downloadHandler(
filename = function(){
paste0("MIRT_Analysis_Report.docx")
},
content = function(file){
#Selections
model <- input$modelselect1
MIRT_est_method <- input$MIRT_est_method
MIRT_person_est_method <- input$MIRT_person_est_method
MIRT_itemfit_method <- input$MIRT_itemfit_method
#Model fit
MIRT_fit <- MIRT_fit_rea()
dimension <- dimension()  %>% as.data.frame()
mode <- dimension_recode(Qmatrix = dimension)
MIRT_modelfit_relat <- MIRT_modelfit_relat_rea()
MIRT_modelfit <- MIRT_modelfit_rea()
#Hypothesis test
MIRT_select_independent <- independent_method(input$MIRT_select_independent)
MIRT_Q3 <- MIRT_Q3_rea()
#Item fit
MIRT_itemfit <- MIRT_itemfit_rea()
#Item parameters
MIRT_itempar <- MIRT_itempar_rea()
#Figures
MIRT_wright <- MIRT_wright_rea()
MIRT_ICC <- MIRT_ICC_rea()
MIRT_TIC <- MIRT_TIC_rea()
MIRT_IIC <- MIRT_IIC_rea()
#Test information
sim_theta <- seq(-4,4,0.01)
Response <- mydata() %>% as.data.frame()
item_info1 <- Item_infor(object = MIRT_fit,theta = matrix(rep(sim_theta,mode$F_n),
ncol = mode$F_n,
nrow = length(sim_theta)),
Qmatrix = dimension, colnames = colnames(Response))$dim_information
colnames(item_info1) <- c(mode$F_names, paste0(mode$F_names,"infor"))
wright_map_height <- input$MIRT_wright_map_height
wrap_height_value <- input$MIRT_wrap_height
wrap_height_value_iic <- input$MIRT_wrap_height_iic
#Export analysis report
path_sys <- system.file("rmd", "MIRT_Analysis_Report.Rmd", package = "TestAnaAPP")
src <- normalizePath(path_sys)
owd <- setwd(tempdir())
on.exit(setwd(owd))
file.copy(src,"MIRT_Analysis_Report.Rmd", overwrite = TRUE)
rmarkdown::render("MIRT_Analysis_Report.Rmd",output_file = file)
}
)
#10 Continuous response model----------------------------------------------------------------
output$max_min_sim <- renderDataTable({
data.frame("Item" = paste0("Item_",1:5),
"Maximum" = rep(112, 5),
"Minimum" = rep(0, 5))
})
max_min_rea <- reactive({
if(is.null(input$max_min_file))
return(NULL)
inFile <- input$max_min_file
dataset <- bruceR::import(inFile$datapath)[,-1] %>% unlist() %>% as.numeric() %>% matrix(ncol = 2)
data <- as.data.frame(dataset)
Response <- mydata() %>% as.data.frame()
if(max(data) < max(Response) | min(data) > min(Response))
stop("The range of uploaded data is smaller than the range of score data.")
colnames(data) <- c("max.item", "min.item")
rownames(data) <- bruceR::import(inFile$datapath)[,1]
data
})
output$max_min_real <- DT::renderDataTable({
if(is.null(input$max_min_file))
return(NULL)
max_min_rea() %>% DT_dataTable_Show()
})
##10.1 Item parameters---------------------------------------------------------
CRM_item_par_rea <- reactive({
Response <- mydata() %>% as.data.frame()
max_min_value <- max_min_rea()
CRM <- EstCRMitem(Response, max_min_value$max.item,
max_min_value$min.item,
max.EMCycle = 2000, converge = 0.001)
par <- CRM$param  %>% round(digits = 3)
rownames(par) <- colnames(Response)
colnames(par) <- c("Discrimination", "Difficult", "Scaling parameter")
par
})
output$CRM_itempar <- DT::renderDataTable({
if(is.null(input$res_data))
return(NULL)
if(is.null(input$max_min_file))
return(NULL)
Response <- mydata() %>% as.data.frame()
if(any(is.na(Response)))
return(data.frame("Any missing values are not allowed."))
CRM_item_par_rea() %>% DT_dataTable_Show()
})
##10.2 Person parameters--------------------------------------------------------
CRM_theta_rea <- reactive({
Response <- mydata() %>% as.data.frame()
max_min_value <-  max_min_rea()
par <- CRM_item_par_rea()
CRMthetas <- EstCRMperson(data = Response, ipar = par,
max.item = max_min_value$max.item,
min.item = max_min_value$min.item
)
CRMthetas
})
output$CRM_person_par <- renderDataTable({
if(is.null(input$res_data))
return(NULL)
if(is.null(input$max_min_file))
return(NULL)
Response <- mydata() %>% as.data.frame()
if(any(is.na(Response)))
return(data.frame("Any missing values are not allowed."))
CRMthetas <- CRM_theta_rea()
cbind("ID" = CRMthetas$thetas[,1], round(CRMthetas$thetas[,-1],digits = 3)) %>%
as.data.frame()
})
##10.3 Item fit index-------------------------------------------------------
CRM_item_fit_rea <- reactive({
if(is.null(input$res_data))
return(NULL)
Response <- mydata() %>% as.data.frame()
max_min_value <-  max_min_rea()
par <- CRM_item_par_rea()
CRMthetas <- CRM_theta_rea()
fit <- fitCRM(data = Response, ipar = par, est.thetas = CRMthetas,
max.item = max_min_value$max.item, group = input$CRM_fit_group)
sta <- cbind("Interval"= fit$fit.stat[,1], fit$fit.stat[,-1] %>%
round(digits = 3)) %>% as.data.frame()
rownames(sta) <- paste0("Group",1:input$CRM_fit_group)
sta
})
output$CRM_item_fit <- DT::renderDataTable({
if(is.null(input$res_data))
return(NULL)
if(is.null(input$max_min_file))
return(NULL)
Response <- mydata() %>% as.data.frame()
if(any(is.na(Response)))
stop("Any missing values are not allowed.")
CRM_item_fit_rea() %>% DT_dataTable_Show()
})
##10.4 Draw Three-Dimensional Item Category Response Curves-----------------------------
CRM_plot_ICC <- reactive({
if(is.null(input$CRM_ICC_item))
return(NULL)
Response <- mydata() %>% as.data.frame()
max_min_value <-  max_min_rea()
par <- CRM_item_par_rea()
item_name <- ifelse(is.null(input$CRM_ICC_item), colnames(Response)[1], input$CRM_ICC_item)
item <- which(colnames(Response) == item_name)
figure <- plotCRM(ipar = par,item = item,
max.item = max_min_value$max.item,
min.item = max_min_value$min.item)
figure
})
output$CRM_ICC <- renderPlot({
if(is.null(input$res_data))
return(NULL)
if(is.null(input$max_min_file))
return(NULL)
Response <- mydata() %>% as.data.frame()
if(any(is.na(Response)))
stop("Any missing values are not allowed.")
CRM_plot_ICC() %>% print()
})
output$CRM_item_selection <- renderUI({
data <- mydata() %>% as.data.frame()
N <- colnames(data)
selectInput(inputId = "CRM_ICC_item",label = "Please select the item to be plotted.",
choices = apply(matrix(N, ncol=1),
MARGIN = 1,FUN = as.vector,simplify = FALSE),selected = N[1],
selectize = TRUE)
})
##10.5 Download results----------------------------------------------------------------------
output$CRM_results <- downloadHandler(
filename = function(){
paste0("CRM_results.xlsx")
},
content = function(file){
CRMthetas <- CRM_theta_rea()
datalist <- list("Item fit" = CRM_item_fit_rea(),
"Item parameters" = CRM_item_par_rea(),
"Person parameter" = CRMthetas$thetas)
openxlsx::write.xlsx(x = datalist,file = file, rowNames = T)
}
)
}
run_app()
devtools::load_all()
run_app()
remove.packages("TestAnaAPP")
devtools::load_all()
run_app()
run_app()
devtools::document()
if (!require(latticeExtra)) {
install.packages("latticeExtra")
requireNamespace("latticeExtra")
}
devtools::document()
devtools::document()
devtools::document()
devtools::document()
remove.packages("TestAnaAPP")
run()
run_app()
remove.packages("latticeExtra")
library(TestAnaAPP)
TestAnaAPP::run_app()
require(latticeExtra)
!require(latticeExtra)
install.packages("latticeExtra")
sessionInfo()
citation("latticeExtra")
latticeExtra::ancestry
devtools::document()
citation("latticeExtra")
remove.packages("TextAnaAPP")
remove.packages("TestAnaAPP")
?latticeExtra::glayer()
？latticeExtra::mapplot()
？latticeExtra::mapplot()
?latticeExtra::mapplot()
latticeExtra::mapplot()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
remove.packages("latticeExtra")
devtools::load_all()
run_app()
plot_wrap <- function(theta,
y_matrix,
lines = "ICC",  #or IIC
is.include.zore = FALSE,
grade_vector = NULL,     #The number of curve for a single item.
main_vector,    #Main
y_lab = NULL,
x_lab = NULL,
title = NULL,   #The main for wrap.
ncol = 5,
scale = "fixed"){
#Item <- colnames(main_vector)
#A single curve
if(lines == "IIC"){
colnames(y_matrix) <- main_vector
plot_data <- bind_cols("theta" = theta, y_matrix)%>%
pivot_longer(cols = -1, names_to = "Item", values_to = "y")
plot_data <- data.frame(plot_data,
"Item" = factor(plot_data$Item, levels = main_vector))
#plot
gra <- ggplot(plot_data, mapping = aes(x = plot_data$theta,
y = plot_data$y))+
geom_line(linewidth =1.2)+
labs(x =  x_lab ,y = y_lab, title =  title)+
theme(plot.title = element_text(hjust = 0.5,size = 8),
axis.title = element_text(size = 7))+
facet_wrap(facets = ~Item, ncol = ncol, scales = scale)
}else if(lines == "ICC"){
di_items <- which(grade_vector == 1)
varname <- colnames(y_matrix)%>%str_split(pattern = ".P.",simplify = T)
varname <- varname[,1]%>%unique()
if(sum(varname != main_vector) >= 1){
colnames_y_matrix <- vector(mode = "character")
low_grade <- ifelse(test = is.include.zore, yes = 0, no = 1)
for (i in 1:length(main_vector)) {
if(grade_vector[i]==2 & is.include.zore == F){
low_grade <- 0
max_grade <- 1
}else{
low_grade <- low_grade
max_grade <- (grade_vector[i]-ifelse(low_grade==0,1,0))
}
for (j in low_grade:max_grade) {
colnames_y_matrix <- c(colnames_y_matrix, paste0(main_vector[i],
".P.",j))
}
}
colnames(y_matrix) <- colnames_y_matrix
}
plot_data1 <- bind_cols("theta" = theta, y_matrix) %>%
pivot_longer(cols = -1, names_to = c("Item","score"),values_to = "y",
names_sep = ".P.") %>% as.data.frame()
plot_data1 <-
data.frame("score" = factor(str_sub(plot_data1$score,start = 1,end = 1),
levels = 0:max(plot_data1$score)),
"Item" = factor(plot_data1$Item, levels = main_vector),
"theta" = plot_data1$theta,
"y" = plot_data1$y)
if(is.include.zore == F){
plot_data <- plot_data1[which(plot_data1$score != 0), ]
}else{
plot_data <- plot_data1
}
gra <-  ggplot( plot_data, mapping = aes(x = plot_data$theta,
y = plot_data$y,
colour = plot_data$score,
linetype = plot_data$score))+
geom_line(linewidth = 1.05)+
labs(x = x_lab, y = y_lab, title = title)+
theme(legend.position = "top",
plot.title = element_text(hjust = 0.5,size = 8),
axis.title = element_text(size = 7))+
facet_wrap(facets = ~Item, ncol = ncol, scales = scale)
}
return(gra)
}
information <- read.xlsx("C:/Users/17807/Desktop/温炜论文/IRT/MIRT_results.xlsx",
sheet = "Item information")
information <- openxlsx::read.xlsx("C:/Users/17807/Desktop/温炜论文/IRT/MIRT_results.xlsx",
sheet = "Item information")
theta <- seq(-4,40.01)
theta <- seq(-4,4,0.01)
information <- openxlsx::read.xlsx("C:/Users/17807/Desktop/温炜论文/IRT/MIRT_results.xlsx",
sheet = "Item information",rowNames = T)
theta <- seq(-4,4,0.01)
plot_wrap(theta = theta,y_matrix = information,lines = "IIC",
main_vector = colnames(information),
y_lab = "Information",
x_lab = "Theta",
title = "Item Information Curve",
ncol = 5,
scale = "free")
information <- openxlsx::read.xlsx("C:/Users/17807/Desktop/温炜论文/IRT/MIRT_results.xlsx",
sheet = "Item information",rowNames = T)
theta <- seq(-4,4,0.01)
plot_wrap(theta = theta,y_matrix = information,lines = "IIC",
main_vector = colnames(information),
y_lab = "Information",
x_lab = "Theta",
title = "Item Information Curve",
ncol = 5,
scale = "free")
theta <- openxlsx::read.xlsx("C:/Users/17807/Desktop/温炜论文/IRT/MIRT_results.xlsx",
sheet = "Person parameters",rowNames = T)
plot_wrap(theta = theta[,1],
y_matrix = information,lines = "IIC",
main_vector = colnames(information),
y_lab = "Information",
x_lab = "Theta",
title = "Item Information Curve",
ncol = 5,
scale = "free")
debug(plot_wrap)
plot_wrap(theta = theta[,1],
y_matrix = information,lines = "IIC",
main_vector = colnames(information),
y_lab = "Information",
x_lab = "Theta",
title = "Item Information Curve",
ncol = 5,
scale = "free")
plot_data
plot_data
plot_wrap <- function(theta,
y_matrix,
lines = "ICC",  #or IIC
is.include.zore = FALSE,
grade_vector = NULL,     #The number of curve for a single item.
main_vector,    #Main
y_lab = NULL,
x_lab = NULL,
title = NULL,   #The main for wrap.
ncol = 5,
scale = "fixed"){
#Item <- colnames(main_vector)
#A single curve
if(lines == "IIC"){
colnames(y_matrix) <- main_vector
plot_data <- bind_cols("theta" = theta, y_matrix)%>%
pivot_longer(cols = -1, names_to = "Item", values_to = "y")
# plot_data <- data.frame(plot_data,
#                         "Item" = factor(plot_data$Item, levels = main_vector))
#
plot_data <- plot_data %>%
mutate("Item" = factor(Item, levels = main_vector))
#plot
gra <- ggplot(plot_data, mapping = aes(x = plot_data$theta,
y = plot_data$y))+
geom_line(linewidth =1.2)+
labs(x =  x_lab ,y = y_lab, title =  title)+
theme(plot.title = element_text(hjust = 0.5,size = 8),
axis.title = element_text(size = 7))+
facet_wrap(facets = ~Item, ncol = ncol, scales = scale)
}else if(lines == "ICC"){
di_items <- which(grade_vector == 1)
varname <- colnames(y_matrix)%>%str_split(pattern = ".P.",simplify = T)
varname <- varname[,1]%>%unique()
if(sum(varname != main_vector) >= 1){
colnames_y_matrix <- vector(mode = "character")
low_grade <- ifelse(test = is.include.zore, yes = 0, no = 1)
for (i in 1:length(main_vector)) {
if(grade_vector[i]==2 & is.include.zore == F){
low_grade <- 0
max_grade <- 1
}else{
low_grade <- low_grade
max_grade <- (grade_vector[i]-ifelse(low_grade==0,1,0))
}
for (j in low_grade:max_grade) {
colnames_y_matrix <- c(colnames_y_matrix, paste0(main_vector[i],
".P.",j))
}
}
colnames(y_matrix) <- colnames_y_matrix
}
plot_data1 <- bind_cols("theta" = theta, y_matrix) %>%
pivot_longer(cols = -1, names_to = c("Item","score"),values_to = "y",
names_sep = ".P.") %>% as.data.frame()
plot_data1 <-
data.frame("score" = factor(str_sub(plot_data1$score,start = 1,end = 1),
levels = 0:max(plot_data1$score)),
"Item" = factor(plot_data1$Item, levels = main_vector),
"theta" = plot_data1$theta,
"y" = plot_data1$y)
if(is.include.zore == F){
plot_data <- plot_data1[which(plot_data1$score != 0), ]
}else{
plot_data <- plot_data1
}
gra <-  ggplot( plot_data, mapping = aes(x = plot_data$theta,
y = plot_data$y,
colour = plot_data$score,
linetype = plot_data$score))+
geom_line(linewidth = 1.05)+
labs(x = x_lab, y = y_lab, title = title)+
theme(legend.position = "top",
plot.title = element_text(hjust = 0.5,size = 8),
axis.title = element_text(size = 7))+
facet_wrap(facets = ~Item, ncol = ncol, scales = scale)
}
return(gra)
}
plot_wrap(theta = theta[,1],
y_matrix = information,lines = "IIC",
main_vector = colnames(information),
y_lab = "Information",
x_lab = "Theta",
title = "Item Information Curve",
ncol = 5,
scale = "free")
devtools::load_all()
run_app()
devtoo
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
run_app()
